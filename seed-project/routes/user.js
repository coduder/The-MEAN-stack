var express = require('express');
var router = express.Router();
var bcrypt = require('bcryptjs'); // 3rd party library for encryption
var jwt = require('jsonwebtoken');

var User = require('../models/user');

router.post('/', function(req, res, next) {
    var user = new User({
        firstName: req.body.firstName,
        lastName: req.body.lastName,
        // this is technically a one way encryption (cannot decrypt)
        password: bcrypt.hashSync(req.body.password, 10), // encrypts password synchronously, 2nd argument is # of salting rounds (salting = algorithm for strength of encryption)
        email: req.body.email,
    });
    user.save(function(err, result) {
        if (err) {
            // 500 indicates a server error
            return res.status(500).json({
                title: 'An Error Occurred',
                error: err
            });
        }
        // 201 indicates no issues occurred
        res.status(201).json({
            message: 'User Created',
            obj: result
        });
    });
});

router.post('/signin', function(req, res, next) {
    User.findOne({ email: req.body.email }, function(err, user) { // mongoose method .findOne() fetches all items that fit condition of argument and returns the first one, emails are unique so only returns one
        if (err) {
            // 500 indicates a server error
            return res.status(500).json({
                title: 'An Error Occurred',
                error: err
            });
        }
        if (!user) {
            return res.status(401).json({
                title: 'Login Failed',
                error: { message: 'Invalid login credentials' } // security issue, want to makesure potential hackers don't know if they have a right e-mail but wrong password by just cycling through emails, keep description vague
            });
        }
        if (!bcrypt.compareSync(req.body.password, user.password)) { // bcrypt see's if the hash generated by the new entered password is comparable (note: not SAME but comparable) to the on in the database
            // invalid password
            return res.status(401).json({
                title: 'Login Failed',
                error: { message: 'Invalid login credentials' } // security issue, want to makesure potential hackers don't know if they have a right e-mail but wrong password by just cycling through emails, keep description vague
            });
        }
        // JSON web token 1st argument = payload as js object, 2nd argument = a secret string to uniquely identify your web page, 3rd argument = options, js object with params
        var token = jwt.sign({ user: user }, 'secret', { expiresIn: 7200 }); // expiresIn: is set in seconds so 7200 = 2 hours
        res.status(200).json({
            message: 'Successfully logged in',
            token: token,
            userId: user._id
        });

    });

});

module.exports = router;